# Kubernetes Production Deployment Manifests

## Production Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: geoairquality-prod
  labels:
    name: geoairquality-prod
    environment: production

---

## ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: geoairquality-config
  namespace: geoairquality-prod
data:
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  REDIS_URL: "redis://geoairquality-redis:6379/0"
  DASK_WORKERS: "8"
  DASK_MEMORY_LIMIT: "4GB"
  CORS_ORIGINS: '["https://app.geoairquality.com"]'

---

## Secret for Sensitive Configuration
apiVersion: v1
kind: Secret
metadata:
  name: geoairquality-secrets
  namespace: geoairquality-prod
type: Opaque
stringData:
  DATABASE_URL: "postgresql+asyncpg://geoair_user:CHANGE_THIS_PASSWORD@geoairquality-postgres:5432/geoairquality"
  SECRET_KEY: "CHANGE_THIS_SECRET_KEY_IN_PRODUCTION"
  REDIS_PASSWORD: "CHANGE_THIS_REDIS_PASSWORD"

---

## PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geoairquality-postgres
  namespace: geoairquality-prod
spec:
  serviceName: geoairquality-postgres
  replicas: 1
  selector:
    matchLabels:
      app: geoairquality-postgres
  template:
    metadata:
      labels:
        app: geoairquality-postgres
    spec:
      containers:
      - name: postgres
        image: postgis/postgis:15-3.3
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: geoairquality
        - name: POSTGRES_USER
          value: geoair_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: geoairquality-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - /usr/bin/pg_isready
            - -U
            - geoair_user
            - -d
            - geoairquality
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /usr/bin/pg_isready
            - -U
            - geoair_user
            - -d
            - geoairquality
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 500Gi

---

## PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: geoairquality-postgres
  namespace: geoairquality-prod
spec:
  selector:
    app: geoairquality-postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---

## Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geoairquality-redis
  namespace: geoairquality-prod
spec:
  serviceName: geoairquality-redis
  replicas: 1
  selector:
    matchLabels:
      app: geoairquality-redis
  template:
    metadata:
      labels:
        app: geoairquality-redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - 2gb
        - --maxmemory-policy
        - allkeys-lru
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "2Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: redis-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---

## Redis Service
apiVersion: v1
kind: Service
metadata:
  name: geoairquality-redis
  namespace: geoairquality-prod
spec:
  selector:
    app: geoairquality-redis
  ports:
  - port: 6379
    targetPort: 6379

---

## API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geoairquality-api
  namespace: geoairquality-prod
  labels:
    app: geoairquality-api
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: geoairquality-api
  template:
    metadata:
      labels:
        app: geoairquality-api
        component: api
    spec:
      initContainers:
      - name: migrations
        image: geoairquality/api:latest
        command: ["alembic", "upgrade", "head"]
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: geoairquality-secrets
              key: DATABASE_URL
      containers:
      - name: api
        image: geoairquality/api:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: geoairquality-secrets
              key: DATABASE_URL
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: geoairquality-secrets
              key: SECRET_KEY
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: geoairquality-config
              key: REDIS_URL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: geoairquality-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: geoairquality-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

---

## API Service
apiVersion: v1
kind: Service
metadata:
  name: geoairquality-api
  namespace: geoairquality-prod
  labels:
    app: geoairquality-api
spec:
  selector:
    app: geoairquality-api
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP

---

## Data Pipeline Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: geoairquality-pipeline
  namespace: geoairquality-prod
  labels:
    app: geoairquality-pipeline
    component: pipeline
spec:
  replicas: 2
  selector:
    matchLabels:
      app: geoairquality-pipeline
  template:
    metadata:
      labels:
        app: geoairquality-pipeline
        component: pipeline
    spec:
      containers:
      - name: pipeline
        image: geoairquality/pipeline:latest
        ports:
        - containerPort: 8787
          name: dashboard
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: geoairquality-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: geoairquality-config
              key: REDIS_URL
        - name: DASK_WORKERS
          valueFrom:
            configMapKeyRef:
              name: geoairquality-config
              key: DASK_WORKERS
        - name: DASK_MEMORY_LIMIT
          valueFrom:
            configMapKeyRef:
              name: geoairquality-config
              key: DASK_MEMORY_LIMIT
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false

---

## Pipeline Service
apiVersion: v1
kind: Service
metadata:
  name: geoairquality-pipeline
  namespace: geoairquality-prod
  labels:
    app: geoairquality-pipeline
spec:
  selector:
    app: geoairquality-pipeline
  ports:
  - port: 8787
    targetPort: 8787
    protocol: TCP
    name: dashboard

---

## Horizontal Pod Autoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: geoairquality-api-hpa
  namespace: geoairquality-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: geoairquality-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---

## Horizontal Pod Autoscaler for Pipeline
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: geoairquality-pipeline-hpa
  namespace: geoairquality-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: geoairquality-pipeline
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85

---

## Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: geoairquality-ingress
  namespace: geoairquality-prod
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.geoairquality.com
    secretName: geoairquality-tls
  rules:
  - host: api.geoairquality.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: geoairquality-api
            port:
              number: 80

---

## Pod Disruption Budget for API
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: geoairquality-api-pdb
  namespace: geoairquality-prod
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: geoairquality-api

---

## Pod Disruption Budget for Pipeline
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: geoairquality-pipeline-pdb
  namespace: geoairquality-prod
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: geoairquality-pipeline

---

## Network Policy for Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: geoairquality-network-policy
  namespace: geoairquality-prod
spec:
  podSelector:
    matchLabels:
      app: geoairquality-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: geoairquality-postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: geoairquality-redis
    ports:
    - protocol: TCP
      port: 6379
