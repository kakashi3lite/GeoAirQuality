# Docker Compose Configuration for Local Development

version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: geoairquality-postgres
    environment:
      POSTGRES_DB: geoairquality
      POSTGRES_USER: geoair_user
      POSTGRES_PASSWORD: geoair_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U geoair_user -d geoairquality"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - geoairquality-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: geoairquality-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - geoairquality-network

  # FastAPI Application
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: geoairquality-api
    environment:
      DATABASE_URL: postgresql+asyncpg://geoair_user:geoair_pass@postgres:5432/geoairquality
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: INFO
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - geoairquality-network
    restart: unless-stopped

  # Data Pipeline
  pipeline:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile
    container_name: geoairquality-pipeline
    environment:
      DATABASE_URL: postgresql://geoair_user:geoair_pass@postgres:5432/geoairquality
      REDIS_URL: redis://redis:6379/0
      DASK_WORKERS: 2
      DASK_MEMORY_LIMIT: 1GB
      DASK_DASHBOARD_PORT: 8787
    ports:
      - "8787:8787"  # Dask dashboard
    volumes:
      - ./data-pipeline:/app
      - ./data:/app/data
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - geoairquality-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: geoairquality-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - geoairquality-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: geoairquality-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - geoairquality-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: geoairquality-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-worldmap-panel,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - geoairquality-network
    restart: unless-stopped

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: geoairquality-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@geoairquality.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - geoairquality-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:

networks:
  geoairquality-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
